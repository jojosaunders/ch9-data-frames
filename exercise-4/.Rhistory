# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Kent,WA"
# Assign your name to the variable `my_name`
my_name <- "JoJo"
# Assign your height (in inches) to a variable `my_height`
height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 600
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/ puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- round(1000/ puppy_price)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/ puppy_price)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/ puppy_price)
source('~/Desktop/INFO 201/ch5-r-intro/exercise-1/exercise.R')
source('~/Desktop/INFO 201/ch5-r-intro/exercise-1/exercise.R')
source('~/Desktop/INFO 201/ch5-r-intro/exercise-1/exercise.R')
source('~/Desktop/INFO 201/ch5-r-intro/exercise-1/exercise.R', echo=TRUE)
source('~/Desktop/INFO 201/ch5-r-intro/exercise-1/exercise.R', echo=TRUE)
?substr
intro <- substr(lyric, 1, 13)
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 1, 13)
nchar(lyric)
fruits <- (lyric, 15, 32)
fruits <- substr(lyric, 15, 32)
?gsub
install.packages("lintr")
person <- list(name = "mike", job="faculty")
person$job
person$name
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
my_breakfast <- c("eggs", "ketchup")
meals < c(my_breakfast, my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- c( breakfast = my_breakfast, lunch = my_lunch)
my_breakfast <- c("eggs", "ketchup")
meals <- c( breakfast <- my_breakfast, lunch <- my_lunch)
my_lunch <- "nothing"
my_breakfast <- c("eggs", "ketchup")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- c( breakfast = my_breakfast, lunch = my_lunch)
meals$dinner <- c("pasta")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
items <- lapply(meals, length)
items
meal # returns the meal
meal <- c(meals, "pizza")
meal # returns the meal
Seahawks_points <- c(9 ,12 , 27, 46)
Seahawks_against_points <- c(17 , 9, 33, 18)
games <- data.frame(Seahawks_points, Seahawks_against_points)
View
View
source('~/Desktop/INFO 201/ch9-data-frames/exercise-1/exercise.R', echo=TRUE)
View
View games
games
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(movies[1:3, 5:6], " is a great movie!")
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "JoJo"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(intro)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- string_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
return(value * 2)
}
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "JoJo"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(intro)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- string_to_title(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
return(value * 2)
}
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
return(value^3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
movies <- c(
"Avengers", "Iron Man 3", "Avengers: Age of Ultron",
"Thor: Ragnarok", "The Martian",
"Mission Impossible: Rouge Nation"
)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[3:5]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(movies[1:3, 5:6], " is a great movie!")
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(c(movies[1:3, 5:6]), " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(moviesc([1:3, 5:6), " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(moviesc([1:3], [5:6]), " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(movies[1:3], [5:6], " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- paste(movies"[1:3]"", "[5:6]"", " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movie[-c(4)]
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-c(4)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- (summer_break - today)
make_birthday_intro <- function(name, age, next_birthday) {
next_birthday <- as.Date(next_birthday)
N <- next_birthday - Sys.Date()
new_age <- age + 1
post <- paste0(make_introduction(name, age), " In ", N, " days I'll be ",
new_age, ".")
return(post)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-03-03")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(value) {
new_value <- gsub("[0-9]", "", value)
return(new_value)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
employees <- paste("Empolyee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000) # this selected 100 values between 40k and 50k
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000) # this selected 100 values between 40k and 50k
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
saleries_2018 <0 salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frames(employees, salaries_2017, salaries_2018, stirngAsFactors = FALSE)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
saleries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frames(employees, salaries_2017, salaries_2018, stirngAsFactors = FALSE)
a
a
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frames(employees, salaries_2017, salaries_2018, stirngAsFactors = FALSE)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frames(employees, salaries_2017, salaries_2018, stirngAsFactors = FALSE)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stirngAsFactors = FALSE)
View(salaries)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringAsFactors = FALSE)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
expenditure <- data.frame(USPersonalExpenditure)
View(expenditures)
View(expenditure)
# What are the column names of your dataframe?
colnames(expenditures)
# What are the column names of your dataframe?
colnames(expenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# What are the row names of your dataframe?
rownames(expenditure)
# Add a column "category" to your data frame that contains the rownames
expenditure$category <- rowname(expenditure)
# What are the row names of your dataframe?
rownames(expenditure)
# Add a column "category" to your data frame that contains the rownames
expenditure$category <- rownames(expenditure)
# How much money was spent on personal care in 1940?
care_1940 <- expenditure['Personal Care', '1940']
# How much money was spent on personal care in 1940?
care_1940 <- expenditure['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- expenditure["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
highest_1960 <- expenditure$[expenditure$1960 == max(expenditure$X1960)
# What was the highest expenditure category in 1960?
highest_1960 <- expenditure$[expenditure$1960 == max(expenditure$X1960)]
# What was the highest expenditure category in 1960?
highest_1960 <- expenditure$category[expenditure$1960 == max(expenditure$X1960)]
# What was the highest expenditure category in 1960?
highest_1960 <- expenditure$category[expenditure$1960 == max(expenditure$X1960)]
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv')
setwd("~/Desktop/INFO 201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[1,]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants['organization',]
View(grants)
View(grants)
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean_grant <- mean(grants[["total_amounts"]])
# What was the mean grant value?
mean_grant <- mean(grants[['total_amounts']])
# What was the mean grant value?
mean_grant <- mean(grants[['total_amounts']])
# What was the mean grant value?
mean_grant <- mean(grants['total_amounts'])
# What was the dollar amount of the largest grant?
largest_grant <-
# What was the dollar amount of the smallest grant?
smallest_grant <-
# What was the mean grant value?
mean_grant <- mean(grants['total_amounts'])
# What was the mean grant value?
mean_grant <- mean(grants['total_amount'])
# What was the mean grant value?
mean_grant <- mean(grants[['total_amount']])
# What was the dollar amount of the largest grant?
largest_grant <- max(grants[["total_amount"]])
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants[["total_amount"]])
